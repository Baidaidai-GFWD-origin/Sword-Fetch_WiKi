import{_ as i,c as t,o as a,ae as n}from"./chunks/framework.B7HHgz8Z.js";const c=JSON.parse('{"title":"API 参考","description":"","frontmatter":{},"headers":[],"relativePath":"docs/api.md","filePath":"docs/api.md"}'),e={name:"docs/api.md"};function l(p,s,h,o,k,d){return a(),t("div",null,s[0]||(s[0]=[n(`<h1 id="api-参考" tabindex="-1">API 参考 <a class="header-anchor" href="#api-参考" aria-label="Permalink to &quot;API 参考&quot;">​</a></h1><p>本文档提供了 Sword-Fetch 核心 API 的详细信息。</p><h2 id="fetch" tabindex="-1"><code>fetch()</code> <a class="header-anchor" href="#fetch" aria-label="Permalink to &quot;\`fetch()\`&quot;">​</a></h2><p>这是执行网络请求的主要函数，是整个库的核心。</p><p><strong>函数签名</strong></p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HTTPOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span></code></pre></div><p><strong>参数</strong></p><ul><li><code>url: String</code> (必需): 您要请求的目标 URL。</li><li><code>options: HTTPOptions?</code> (可选): 一个 <code>HTTPOptions</code> 对象，用于对请求进行更详细的配置。如果此参数为 <code>null</code>，函数将执行一个默认的 <code>GET</code> 请求。</li></ul><p><strong>返回值</strong></p><ul><li><code>String</code>: 服务器响应的主体内容（Response Body）。</li></ul><p><strong>使用示例</strong></p><h3 id="示例-1-发起一个简单的-get-请求" tabindex="-1">示例 1: 发起一个简单的 GET 请求 <a class="header-anchor" href="#示例-1-发起一个简单的-get-请求" aria-label="Permalink to &quot;示例 1: 发起一个简单的 GET 请求&quot;">​</a></h3><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只需提供 URL 即可</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> githubUser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.github.com/users/octocat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(githubUser)</span></span></code></pre></div><h3 id="示例-2-发起一个带参数的-post-请求" tabindex="-1">示例 2: 发起一个带参数的 POST 请求 <a class="header-anchor" href="#示例-2-发起一个带参数的-post-请求" aria-label="Permalink to &quot;示例 2: 发起一个带参数的 POST 请求&quot;">​</a></h3><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 创建一个 HTTPOptions 实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> postOptions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTTPOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;methods&quot;: &quot;POST&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;body&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;title&quot;: &quot;Sword-Fetch is awesome&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;body&quot;: &quot;This is a post from Sword-Fetch.&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;userId&quot;: 1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 调用 fetch 函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> postResponse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, postOptions)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(postResponse)</span></span></code></pre></div><hr><h2 id="httpoptions" tabindex="-1"><code>HTTPOptions</code> <a class="header-anchor" href="#httpoptions" aria-label="Permalink to &quot;\`HTTPOptions\`&quot;">​</a></h2><p>这是一个配置类，用于定义 <code>fetch</code> 函数的各种参数，通过一个 JSON 字符串进行初始化。</p><p><strong>构造函数</strong></p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTTPOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>JSON 结构</strong></p><p><code>content</code> 参数必须是一个合法的 JSON 字符串，其内部可以包含以下字段：</p><ul><li><code>methods: String</code> (可选): 定义 HTTP 请求方法。如果未提供，则默认为 <code>&quot;GET&quot;</code>。 <ul><li>支持的值: <code>&quot;GET&quot;</code>, <code>&quot;POST&quot;</code>, <code>&quot;PUT&quot;</code>, <code>&quot;DELETE&quot;</code>。</li></ul></li><li><code>head: JsonObject</code> (可选): 一个 JSON 对象，用于定义请求头。</li><li><code>body: JsonElement</code> (可选): 请求体。它可以是任何合法的 JSON 元素（对象、数组、字符串等），最终会被转换为字符串作为请求体发送。</li></ul><div class="warning custom-block"><p class="custom-block-title">Header 功能提示</p><p>在当前版本的 <code>Main.kt</code> 实现中，<code>head</code> 字段虽然会被解析，但<strong>并未</strong>实际应用到最终发出的 <code>OkHttp</code> 请求中。这是一个已知的待办事项。</p></div><p><strong>完整的 JSON 示例</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;methods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PUT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;head&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;Authorization&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bearer YOUR_ACCESS_TOKEN&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;X-Custom-Header&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyValue&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;body&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Updated Title&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="httpmethods" tabindex="-1"><code>HttpMethods</code> <a class="header-anchor" href="#httpmethods" aria-label="Permalink to &quot;\`HttpMethods\`&quot;">​</a></h2><p>这是一个枚举类，定义了所有支持的 HTTP 方法字符串常量。</p><p><strong>枚举值</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">对应字符串</th></tr></thead><tbody><tr><td style="text-align:left;"><code>post</code></td><td style="text-align:left;"><code>&quot;POST&quot;</code></td></tr><tr><td style="text-align:left;"><code>get</code></td><td style="text-align:left;"><code>&quot;GET&quot;</code></td></tr><tr><td style="text-align:left;"><code>put</code></td><td style="text-align:left;"><code>&quot;PUT&quot;</code></td></tr><tr><td style="text-align:left;"><code>delete</code></td><td style="text-align:left;"><code>&quot;DELETE&quot;</code></td></tr></tbody></table>`,31)]))}const E=i(e,[["render",l]]);export{c as __pageData,E as default};
